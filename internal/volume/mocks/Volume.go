// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	agent "github.com/projecteru2/yavirt/internal/virt/agent"
	base "github.com/projecteru2/yavirt/internal/volume/base"

	guestfs "github.com/projecteru2/yavirt/internal/virt/guestfs"

	image "github.com/projecteru2/yavirt/internal/image"

	libvirt "github.com/projecteru2/yavirt/pkg/libvirt"

	mock "github.com/stretchr/testify/mock"
)

// Volume is an autogenerated mock type for the Volume type
type Volume struct {
	mock.Mock
}

// Amplify provides a mock function with given fields: delta, dom, ga, devPath
func (_m *Volume) Amplify(delta int64, dom libvirt.Domain, ga agent.Interface, devPath string) (int64, error) {
	ret := _m.Called(delta, dom, ga, devPath)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, libvirt.Domain, agent.Interface, string) (int64, error)); ok {
		return rf(delta, dom, ga, devPath)
	}
	if rf, ok := ret.Get(0).(func(int64, libvirt.Domain, agent.Interface, string) int64); ok {
		r0 = rf(delta, dom, ga, devPath)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, libvirt.Domain, agent.Interface, string) error); ok {
		r1 = rf(delta, dom, ga, devPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CaptureImage provides a mock function with given fields: user, name
func (_m *Volume) CaptureImage(user string, name string) (*image.UserImage, error) {
	ret := _m.Called(user, name)

	var r0 *image.UserImage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*image.UserImage, error)); ok {
		return rf(user, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *image.UserImage); ok {
		r0 = rf(user, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.UserImage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Check provides a mock function with given fields:
func (_m *Volume) Check() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cleanup provides a mock function with given fields:
func (_m *Volume) Cleanup() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: force
func (_m *Volume) Delete(force bool) error {
	ret := _m.Called(force)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateID provides a mock function with given fields:
func (_m *Volume) GenerateID() {
	_m.Called()
}

// GenerateXML provides a mock function with given fields: i
func (_m *Volume) GenerateXML(i int) ([]byte, error) {
	ret := _m.Called(i)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, error)); ok {
		return rf(i)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateXMLWithDevName provides a mock function with given fields: devName
func (_m *Volume) GenerateXMLWithDevName(devName string) ([]byte, error) {
	ret := _m.Called(devName)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(devName)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(devName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(devName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreatedTime provides a mock function with given fields:
func (_m *Volume) GetCreatedTime() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetGfx provides a mock function with given fields:
func (_m *Volume) GetGfx() (guestfs.Guestfs, error) {
	ret := _m.Called()

	var r0 guestfs.Guestfs
	var r1 error
	if rf, ok := ret.Get(0).(func() (guestfs.Guestfs, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() guestfs.Guestfs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(guestfs.Guestfs)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuestID provides a mock function with given fields:
func (_m *Volume) GetGuestID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetHostname provides a mock function with given fields:
func (_m *Volume) GetHostname() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *Volume) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMountDir provides a mock function with given fields:
func (_m *Volume) GetMountDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSize provides a mock function with given fields:
func (_m *Volume) GetSize() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetStatus provides a mock function with given fields:
func (_m *Volume) GetStatus() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetVer provides a mock function with given fields:
func (_m *Volume) GetVer() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IncrVer provides a mock function with given fields:
func (_m *Volume) IncrVer() {
	_m.Called()
}

// IsSys provides a mock function with given fields:
func (_m *Volume) IsSys() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Lock provides a mock function with given fields:
func (_m *Volume) Lock() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetaKey provides a mock function with given fields:
func (_m *Volume) MetaKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Volume) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewSnapshotAPI provides a mock function with given fields:
func (_m *Volume) NewSnapshotAPI() base.SnapshotAPI {
	ret := _m.Called()

	var r0 base.SnapshotAPI
	if rf, ok := ret.Get(0).(func() base.SnapshotAPI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.SnapshotAPI)
		}
	}

	return r0
}

// Prepare provides a mock function with given fields: _a0
func (_m *Volume) Prepare(_a0 image.Image) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(image.Image) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repair provides a mock function with given fields:
func (_m *Volume) Repair() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields:
func (_m *Volume) Save() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuestID provides a mock function with given fields: id
func (_m *Volume) SetGuestID(id string) {
	_m.Called(id)
}

// SetHostname provides a mock function with given fields: name
func (_m *Volume) SetHostname(name string) {
	_m.Called(name)
}

// SetStatus provides a mock function with given fields: st, force
func (_m *Volume) SetStatus(st string, force bool) error {
	ret := _m.Called(st, force)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(st, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVer provides a mock function with given fields: _a0
func (_m *Volume) SetVer(_a0 int64) {
	_m.Called(_a0)
}

// Unlock provides a mock function with given fields:
func (_m *Volume) Unlock() {
	_m.Called()
}

type mockConstructorTestingTNewVolume interface {
	mock.TestingT
	Cleanup(func())
}

// NewVolume creates a new instance of Volume. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVolume(t mockConstructorTestingTNewVolume) *Volume {
	mock := &Volume{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
